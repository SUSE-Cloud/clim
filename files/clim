#!/bin/bash
set +x
test -f ~/.clim && source ~/.clim
OPTINT=1
options=""
verbose=0
notify=0

while getopts "ch?no:l:" opt; do
   case "$opt" in
   h|\?)
     cat <<EOF
HELP:
  -c                                   :run config-processor with option "-e remove_deleted_servers=True -e free_unused_addresses=True"
  -o "<OPTIONS>"                       :add <OPTIONS> to the end of the ansoble-playbook call
  -l "<RESOURCE>"                      :if the service command is used, limit the execution to the resource <RESOURCE>
  -n notify via pushover	       : Pushover is a service to push notifications to a mobile (other clients are possible). The credentials for the service
                                         have to be configured in ~/.clim  

COMMANDS
  prepare "MESSAGE"                    : commits the config changes, run the config-processor and run the ready-deployment if the config is valid
  site                                 : deploys the config to the nodes via the site.yml playbook
  status	                       : checks the status of the services
  stop		                       : shutdown the openstack services
  start		                       : start the openstack services
  service <OPENSTACK-SERVICE> <ACTION> : runs the ansible playbook to execute <ACTION> on the service <OPENSTACK>
                                         e.x.: "clim service neutron restart"
  service list                         : list all services
  setup_bashrc	                       : crates a .bashrc file and setup variables which can be used as a shortcut for jumping in the correct directory:
                                          - $def=~/openstack/my_cloud/definition
                                          - $data=~/openstack/my_cloud/definition/data
                                          - $scratch=~/scratch/ansible/next/ardana/ansible
                                            to jump into the DATA directory of the input model, just run "cd $data"

EOF
     exit 0
   ;;
   v)
     verbose=1
   ;;
   c) 
     options="-e remove_deleted_servers=True -e free_unused_addresses=True"
   ;;
   o)
     options="$options $OPTARG"
   ;;
   l)
     options="$options --limit $OPTARG"
   ;;


   n)
     notify=1
   ;;
  esac
done

shift $(($OPTIND - 1))

[ "$1" = "--" ] && shift



case "$1" in
	prepare)
	  cd /var/lib/ardana//openstack/ardana/ansible
          if [ -z "$2" ]
	     then 
               echo "git commit message is missing: clim prepare \"MESSAGE\" "
               exit 3
          fi
          git add -A
	  git commit -m "$2"
          ansible-playbook -i hosts/localhost config-processor-run.yml $options
          if [ $? -ne 0 ]
                then
                 echo ### ERROR: config-processor is not happy
                 exit 2
          fi
          echo ###########################################################################################################
          echo ###########################################################################################################
          echo ###########################################################################################################

          ansible-playbook -i hosts/localhost ready-deployment.yml
	  ;;


        site)
	  cd ~/scratch/ansible/next/ardana/ansible
          screen ansible-playbook -i hosts/verb_hosts site.yml
	  ;;

        start)
          cd ~/scratch/ansible/next/ardana/ansible
          ansible-playbook -i hosts/verb_hosts ardana-start.yml
          ;;

        stop)
          cd ~/scratch/ansible/next/ardana/ansible
          ansible-playbook -i hosts/verb_hosts ardana-stop.yml
          ;;

        status)
          cd ~/scratch/ansible/next/ardana/ansible
          ansible-playbook -i hosts/verb_hosts ardana-status.yml
          ;;

        service)
          if [ "$2" == "list" ]
	       then
               echo "SERVICES:"
	       cd  ~/scratch/ansible/next/ardana/ansible
                ls *.yml | grep '^[a-z]' | grep "start\|stop\|restart\|status" | cut -d "-" -f 1 | sort -u
          else
          if [ -z "$2" ] || [ -z "$3" ] 
		then
		 echo "clim service <SERVICENAME> <ACTION>"
		 exit
          fi
          acmd="${2}-${3}.yml"
          cd ~/scratch/ansible/next/ardana/ansible
          if [ ! -f /var/lib/ardana/scratch/ansible/next/ardana/ansible/$acmd ]
	     then
               echo "service and/or action not found - no valid ansible playbook found"
               exit 5
             fi
          ansible-playbook -i hosts/verb_hosts $acmd $options
          fi
          ;;
        cobbler-deploy)
              cd ~/openstack/ardana/ansible
              ansible-playbook -i hosts/localhost cobbler-deploy.yml
	;;
        
        prepare-sles-grub2)
              cd ~/openstack/ardana/ansible
              ansible-playbook -i hosts/localhost prepare-sles-grub2.yml
	;;
        bm-reimage)
	      cd ~/openstack/ardana/ansible
              nodes=""
              if [ ! -z $2 ]
                  then
                   nodes="-e nodelist=$2"
	      fi 
              ansible-playbook -i hosts/localhost bm-reimage.yml $nodes
	 ;;
        test)
          echo Hallo
          echo DEBUG: $options $2 $3
          ;;

        setup_bashrc)
	  cat <<EOF >> /var/lib/ardana/.bashrc
# added by clim
export def=~/openstack/my_cloud/definition
export data=~/openstack/my_cloud/definition/data
export scratch=~/scratch/ansible/next/ardana/ansible 
EOF
	  ;;
   	*)
          echo $"Usage: $0 cd_myconfig " 
	  exit 1
esac
if [ $notify -eq 1 ]
	then
         curl -s \
  --form-string "token=$push_token" \
  --form-string "user=$push_user" \
  --form-string "message=$push_msg" \
  --form-string "device=$push_device" \
  --form-string "title=$push_title" \
   $push_URL >/dev/null
fi



